fallback methods
    1. Receive function
        i. a contract can have at most one receive function defined as receive() external payable
        ii. the receive function cannot take any arguments and it can't return anything, it must have external visibility and payable state mutability
        iii. the receive function can be virtual, can override, and can have modifiers
            1. the virtual keyword is used in the base contract to define a function that can be overriden in derived contracts
        iv. this function is executed on a call to a contract with empty calldata
        v. this is the function that is executed on plain ETH transfers, eg .send() or .transfer()
        vi. if no such function exists, but a payable fallback function exists, the fallback function will be called on a plain ETH transfer
        vii. if neither receive Ether nor a payable fallback function is present, the contract cannot receive Ether through a transaction that does not represent a pyable function call and it throws an exception

    2. Fallback function
        i. A contract can have at most one fallback function
        ii. either fallback() external payable or fallback(bytes calldata input) external payable returns(bytes memory output).
        iii. this function must have external visibility    
            1) note - in solidity, the calldata keyword is used to specify that a function parameter should be read from the input data of a transaction.
            calldata keyword is primarily used for functions that are called externally, either from other contracts or from outside the Ethereum network. 
        iv. the fallback function is executed on a call to the contract if none of the other functions match the given function signature, or if no data was supplied at all and there is no receive Ether function.
        v. the fallback function always receives data, but in order to also receive Ether it must be market payable
        vi. if the version with parameters is used, input will contain the full data sent to the contract (equal to msg.data) and can return data in output
        the returned data will not be ABI-encoded. Instead it will be returned without modifications (not even padding)