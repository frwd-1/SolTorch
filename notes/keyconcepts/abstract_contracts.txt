In Solidity, the programming language used for writing smart contracts on the Ethereum blockchain, an "abstract contract" is a specific type of contract that cannot be compiled into a contract to be deployed on the Ethereum network on its own. This is because an abstract contract is incomplete by design. Here's a breakdown of what they are and how they work:

1. **Incomplete Implementation**: Abstract contracts are used when you want to create a contract template with certain functionalities left unimplemented. It's a way to define a contract that outlines a set of functionalities and structures without providing a full implementation for all of them.

2. **Methods Without Implementation**: In an abstract contract, some functions are declared but not implemented. These functions are known as abstract functions. An abstract function is marked by the lack of a function body â€“ it ends with a semicolon (;) instead of being enclosed in braces ({...}).

3. **Inheritance**: Abstract contracts are meant to be inherited by other contracts. The inheriting contract must then implement the abstract functions, thereby completing the missing pieces. If an inheriting contract fails to implement all abstract functions, it too will be considered an abstract contract.

4. **Use Cases**: Abstract contracts are useful in designing flexible and reusable code. For instance, you might create an abstract contract to define a standard interface or to outline a set of functions that different types of contracts should implement according to their specific needs.

Here's a simple example to illustrate an abstract contract in Solidity:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Vehicle {
    function start() public virtual returns (string memory);
    function stop() public virtual returns (string memory);
}

contract Car is Vehicle {
    function start() public override returns (string memory) {
        return "Car started";
    }

    function stop() public override returns (string memory) {
        return "Car stopped";
    }
}
```

In this example:

- `Vehicle` is an abstract contract because it doesn't provide implementations for its functions `start()` and `stop()`.
- `Car` is a concrete contract that inherits from `Vehicle` and provides specific implementations for the `start()` and `stop()` functions.

Thus, an abstract contract in Solidity is a foundational component that enables polymorphism and code reuse, both crucial aspects of effective smart contract development.