In Solidity, the concept of a "double entry point" for a token contract isn't a standard term, but it might refer to a situation where a contract has two primary functions or methods through which interactions can occur. This is particularly relevant in the context of token contracts, which often adhere to standards like ERC-20 or ERC-721. Let's break down what this could mean:

1. **Two Different Functions for Interaction**: A token contract could have two primary functions that serve as entry points. For example, in an ERC-20 token contract, these could be `transfer` and `approve`/`transferFrom` functions. `transfer` is used for direct transfers of tokens between addresses, while `approve` and `transferFrom` are used for delegated transfers, where one address authorizes another to transfer tokens on its behalf.

2. **Two Different Interfaces for Interaction**: A contract might implement two different standards or interfaces. For instance, a token contract could follow both ERC-20 (for fungible tokens) and ERC-721 (for non-fungible tokens). This would mean the contract has a set of functions for each standard, effectively creating two entry points for different types of interactions.

3. **Fallback and Receive Functions**: In Solidity, contracts can have a `fallback` function and a `receive` function. These are special functions that are executed when the contract receives plain Ether without any data or with data that doesn't match any other function. In the context of a token contract, these could be used to handle direct Ether transactions, perhaps to buy tokens or trigger specific contract actions.

4. **Admin and User Functions**: Some contracts have distinct entry points for administrative actions (like minting or burning tokens, or changing key parameters) and user actions (like transferring tokens). This separation is critical for decentralized applications to ensure security and proper access control.

5. **Upgradeability**: In upgradeable contracts (like those using the proxy pattern), there might be two sets of functions - one set in the original contract and another in the upgraded contract. Both sets of functions might remain active for different purposes.

6. **Interacting with Multiple Contracts**: Sometimes, a token contract might interact with other contracts (like a staking contract or a liquidity pool contract), and these interactions can be seen as different entry points. Users interact with the token contract, which in turn interacts with other contracts.

Each of these scenarios represents a different way a Solidity contract might have multiple primary methods of interaction, which could be referred to as "double entry points". It's essential to design these entry points carefully to ensure the contract remains secure and functions as intended.